/*
 *
 *  [y] hybris Platform
 *
 *  Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved.
 *
 *  This software is the confidential and proprietary information of SAP
 *  ("Confidential Information"). You shall not disclose such Confidential
 *  Information and shall use it only in accordance with the terms of the
 *  license agreement you entered into with SAP.
 * /
 */
package com.sap.hybris.crm.sapcrmordermgmtbol.transaction.salesdocument.backend.interf.crm.strategy;

import de.hybris.platform.sap.core.jco.connection.JCoConnection;
import de.hybris.platform.sap.core.jco.exceptions.BackendException;
import de.hybris.platform.sap.sapordermgmtbol.transaction.businessobject.interf.SalesDocument;
import de.hybris.platform.sap.sapordermgmtbol.transaction.salesdocument.backend.util.BackendCallResult;

import com.sap.hybris.crm.sapcrmordermgmtbol.transaction.salesdocument.backend.impl.crm.LoadOperation;
import com.sap.hybris.crm.sapcrmordermgmtbol.transaction.salesdocument.backend.interf.crm.BackendState;


/**
 * Standard actions provided by the LORD API; such as save, load, copy, etc. <br>
 *
 */
public interface LrdActionsStrategy
{

	/**
	 * Object type constant to delete partner function.
	 */
	public static final String SHIPTO_PARTNER = "SHIPTO_PARTNER";

	/**
	 * Object type constant to delete sales document items.
	 */
	public static final String ITEMS = "ITEMS";



	/**
	 * Strategy for CRM_LORD_SAVE.
	 *
	 * @param posd
	 *           The sales document (e.g. basket, order, ...)
	 * @param commit
	 *           Specifies if the save should be committed also
	 * @param cn
	 *           Connection to use
	 * @return Object containing messages of call and (if present) the return code generated by the function module.
	 * @throws BackendException
	 *            in case of a back-end or communication error
	 */
	public BackendCallResult saveCrmOrder(SalesDocument posd, boolean commit, JCoConnection cn) throws BackendException;

	/**
	 * Strategy for CRM_LORD_LOAD.
	 *
	 * @param posd
	 *           The sales document (e.g. basket, order, ...)
	 * @param crmDocument
	 *           back-end layer representation of CRM sales document
	 * @param cn
	 *           Connection to use
	 * @param loadState
	 *           operation with should be performed, create, display or
	 * @return Object containing messages of call and (if present) the return code generated by the function module.
	 * @throws BackendException
	 *            in case of a back-end error
	 */
	public BackendCallResult loadCrmOrderDetail(SalesDocument posd, BackendState crmDocument, JCoConnection cn, LoadOperation loadState)
			throws BackendException;

	/**
	 * @param posd
	 * @param crmDocument
	 * @param cn
	 * @param loadState
	 * @return
	 * @throws BackendException
	 */
	BackendCallResult createBasket(SalesDocument posd, BackendState crmDocument, JCoConnection cn) throws BackendException;

}
