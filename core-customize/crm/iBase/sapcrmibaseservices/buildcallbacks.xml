<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- ~ [y] hybris Platform ~ ~ Copyright (c) 2000-2016 SAP SE ~ All rights 
	reserved. ~ ~ This software is the confidential and proprietary information 
	of SAP ~ Hybris ("Confidential Information"). You shall not disclose such 
	~ Confidential Information and shall use it only in accordance with the ~ 
	terms of the license agreement you entered into with SAP Hybris. -->
<!-- All hybris buildcallbacks.xml macrodefinitions: Build/Documentation 
	before/after ant macro "clean" <macrodef name="sapcrmibaseservices_before_clean"/> 
	<macrodef name="sapcrmibaseservices_after_clean"/> before/after ant macro 
	"build" <macrodef name="sapcrmibaseservices_before_build"/> <macrodef name="sapcrmibaseservices_after_build"/> 
	before/after ant macro "compile_core" - the core module of the extension 
	<macrodef name="sapcrmibaseservices_before_compile_core"> <macrodef name="sapcrmibaseservices_after_compile_core"> 
	before/after ant macro "compile_web" - the web module of the extension <macrodef 
	name="sapcrmibaseservices_before_compile_web" /> <macrodef name="sapcrmibaseservices_after_compile_web" 
	/> before/after ant macro "compile_hmc" - the hmc module of the extension 
	<macrodef name="sapcrmibaseservices_before_compile_hmc" /> <macrodef name="sapcrmibaseservices_after_compile_hmc" 
	/> Preparing extension will be called in the beginning of the ant call and 
	only once (also when using multiple ant targets e.g. ant build yunittest) 
	<macrodef name="sapcrmibaseservices_only_once_prepare"/> Creating ear module/production 
	before/after ant macro "ear" <macrodef name="sapcrmibaseservices_before_ear"/> 
	<macrodef name="sapcrmibaseservices_after_ear"/> before/after ant macro "production" 
	- for hybris server only <macrodef name="sapcrmibaseservices_before_production" 
	/> <macrodef name="sapcrmibaseservices_after_production" /> JUnit Test before/after 
	ant macro "yunitinit" <macrodef name="sapcrmibaseservices_before_yunitinit" 
	/> <macrodef name="sapcrmibaseservices_after_yunitinit" /> before/after ant 
	macro "yunit" <macrodef name="sapcrmibaseservices_before_yunit" /> <macrodef 
	name="sapcrmibaseservices_after_yunit" /> Distribution package before/after 
	ant macro "dist" - internal target; only for use when platform is available 
	in source code <macrodef name="sapcrmibaseservices_after_dist"/> <macrodef 
	name="sapcrmibaseservices_before_dist"/> before/after ant macro "dist_copy" 
	- internal target; only for use when platform is available in source code 
	<macrodef name="sapcrmibaseservices_before_dist_copy"/> <macrodef name="sapcrmibaseservices_after_dist_copy"/> 
	With these filters you can override the default extension filters defined 
	in platform/resources/ant/dist/filtersets.xml <patternset id="extension.sapcrmibaseservices.binary.filter"> 
	<patternset refid="extension.filter" /> <exclude name="**/*-source.jar" /> 
	</patternset> <patternset id="extension.sapcrmibaseservices.source.filter"> 
	<exclude name="**/bin/**" /> </patternset> With this filter you can decide 
	what should be excluded from development zip. <patternset id="extension.sapcrmibaseservices.devzip.filter"> 
	Include all files from extension.source.filter. <patternset refid="extension.source.filter" 
	/> Exclude unwanted files. <exclude name="lib/exclude-me.jar" /> </patternset> -->
<project name="sapcrmibaseservices_buildcallbacks">

	<!-- Called whenever 'ant ear' is used. this callback can be used to modify 
		the content of the ear file ${ear.path}: path to ear -->
	<macrodef name="sapcrmibaseservices_before_ear">
		<sequential>

			<!-- you can do anything before the EAR file is being packed -->

		</sequential>
	</macrodef>

</project>
