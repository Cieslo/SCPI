<?xml version="1.0" encoding="UTF-8"?>
<!-- [y] hybris Platform Copyright (c) 2000-2015 hybris AG All rights reserved. 
	This software is the confidential and proprietary information of hybris ("Confidential 
	Information"). You shall not disclose such Confidential Information and shall 
	use it only in accordance with the terms of the license agreement you entered 
	into with hybris. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- interceptors -->
	
	<alias alias="sapCRMB2BUnitAddressConsistencyInterceptor" name="defaultSAPCustomerAddressConsistencyInterceptor" />
	<bean id="defaultSAPCustomerAddressConsistencyInterceptor"
		class="com.sap.hybris.sapcrmcustomerb2b.interceptors.SAPCRMB2BUnitAddressConsistencyInterceptor"
		autowire="byName" />
	<bean id="sapCustomerAddressConsistencyInterceptorMapping"
		class="de.hybris.platform.servicelayer.interceptor.impl.InterceptorMapping">
		<property name="interceptor" ref="sapCRMB2BUnitAddressConsistencyInterceptor" />
		<property name="typeCode" value="Address" />
		<property name="order" value="5000" />
	</bean>
	<bean id="sapCRMB2BRelationAddressConsistencyInterceptor"
		class="com.sap.hybris.sapcrmcustomerb2b.interceptors.SAPCRMB2BRelationAddressConsistencyInterceptor"
		autowire="byName" />
	<bean id="sapCRMB2BRelationAddressConsistencyInterceptorMapping"
		class="de.hybris.platform.servicelayer.interceptor.impl.InterceptorMapping">
		<property name="interceptor"
			ref="sapCRMB2BRelationAddressConsistencyInterceptor" />
		<property name="typeCode" value="SAPCRMB2BRelations" />
		<property name="order" value="5000" />
	</bean>
	<bean id="sapCRMB2BCustomerInterceptor"
		class="com.sap.hybris.sapcrmcustomerb2b.interceptors.SAPCRMB2BCustomerInterceptor"
		autowire="byName">
	</bean>
	<bean id="sapCRMB2BCustomerInterceptorMapping"
		class="de.hybris.platform.servicelayer.interceptor.impl.InterceptorMapping">
		<property name="interceptor" ref="sapCRMB2BCustomerInterceptor" />
		<property name="typeCode" value="B2BCustomer" />
		<property name="order" value="5000" />
	</bean>
	<alias alias="b2bUnitService" name="defaultSAPCRMB2BUnitService" />
	<bean id="defaultSAPCRMB2BUnitService" class="com.sap.hybris.sapcrmcustomerb2b.service.DefaultSAPCRMB2BUnitService" parent="defaultSAPB2BUnitService">
		<property name="baseStoreService" ref="baseStoreService" />
		<property name="flexibleSearchService" ref="flexibleSearchService" />
		<property name="b2bUnitDao" ref="b2bUnitDao" />
	</bean>

	<!-- Event listener to be triggered when a new customer is registered -->
	<alias alias="defaultB2BCustomerRegistrationEventListener" name="sapdefaultB2BCustomerRegistrationEventListener" />
	<bean id="sapdefaultB2BCustomerRegistrationEventListener"
		class="com.sap.hybris.sapcrmcustomerb2b.outbound.DefaultB2BCustomerRegistrationEventListener">
		<property name="modelService" ref="modelService" />
		<property name="clusterService" ref="clusterService" />
		<property name="tenantService" ref="tenantService" />
		<property name="b2bContactExportService" ref="defaultcrmB2BContactExportService" />
		<property name="sapContactIdGenerator" ref="sapcrmb2bContactIdGenerator"></property>
		<property name="commonutil" ref="commonutil"></property>
		<property name="dateformat" value="MM/dd/yyyy HH:mm:ss"></property>
	</bean>

	<!-- Interceptor to trigger the export to CRM when the B2B customer data 
		is updated. The interceptor mapping is defined in sapcustomerb2b extension. 
		This bean overrides the interceptor mentioned in that mapping. -->
	<alias alias="defaultB2BCustomerInterceptor" name="sapcrmB2BCustomerInterceptor" />
	<bean id="sapcrmB2BCustomerInterceptor"
		class="com.sap.hybris.sapcrmcustomerb2b.outbound.DefaultB2BCustomerInterceptor"
		autowire="byName">
		<property name="b2bContactExportService" ref="defaultcrmB2BContactExportService" />
		<property name="commonutil" ref="commonutil"></property>

	</bean>


	<!-- Interceptor to trigger the export to CRM when custmer address is changed. 
		The interceptor mapping is defined in sapcustomerb2b extension. This bean 
		overrides the interceptor mentioned in that mapping -->
	<alias alias="defaultB2BCustomerAddressInterceptor" name="defaultcrmB2BCustomerAddressInterceptor" />
	<bean id="defaultcrmB2BCustomerAddressInterceptor"
		class="com.sap.hybris.sapcrmcustomerb2b.outbound.DefaultB2BCustomerAddressInterceptor"
		autowire="byName">
		<property name="commonutil" ref="commonutil"></property>
	</bean>

	<!-- catch register event -->
	<bean id="AddressRemovalEventListener"
		class="com.sap.hybris.sapcrmcustomerb2b.outbound.AddressRemovalEventListener"
		autowire="byName">
		<property name="b2bContactExportService" ref="defaultcrmB2BContactExportService" />
		<property name="modelService" ref="modelService" />
	</bean>

	<bean id="AddressAddUpdateListener"
		class="com.sap.hybris.sapcrmcustomerb2b.outbound.AddressAddUpdateEventListener"
		autowire="byName">
		<property name="b2bContactExportService" ref="defaultcrmB2BContactExportService" />
		<property name="commonutil" ref="commonutil"></property>
	</bean>

	<!-- key generator for the sap contact ID -->
	<bean id="sapcrmb2bContactIdGenerator"
		class="de.hybris.platform.servicelayer.keygenerator.impl.PersistentKeyGenerator"
		init-method="init" scope="tenant">
		<property name="key" value="sap_crmcontact_id" />
		<property name="start" value="${keygen.crmcustomer.sap_contact_id.start}" />
		<property name="digits" value="${keygen.crmcustomer.sap_contact_id.digits}" />
		<property name="type" value="${keygen.crmcustomer.sap_contact_id.type}" />
		<property name="template"
			value="${keygen.crmcustomer.sap_contact_id.template}" />
	</bean>

	<!-- B2B Contact Export -->
	<bean id="defaultcrmB2BContactExportService"
		class="com.sap.hybris.sapcrmcustomerb2b.outbound.B2BContactExportService">
		<property name="customerNameStrategy" ref="customerNameStrategy" />
		<property name="storeSessionFacade" ref="storeSessionFacade" />
		<property name="exporter" ref="b2bcontactexporterdatahub" />
		<property name="buyerCode" value="${crm.contact.company.relationship.function.buyerCode}" />
		<property name="executiveBoardCode"  value="${crm.contact.company.relationship.function.executiveBoardCode}" />
		<property name="headOfPurchasingCode" value="${crm.contact.company.relationship.function.headOfPurchasingCode}" />
	</bean>

	<bean id="commonutil" class="com.sap.hybris.sapcrmcustomerb2b.outbound.CommonUtility">
		<property name="baseStoreService" ref="baseStoreService" />
	</bean>

	<!-- Implementation for b2bcontactexporter interface. Exports data to datahub -->
	<bean id="b2bcontactexporterdatahub"
		class="com.sap.hybris.sapcrmcustomerb2b.outbound.B2BContactExporterDataHub">
		<property name="feedName" value="SAPB2BCUSTOMER_OUTBOUND_FEED"></property>
		<property name="relationshipRawType" value="RawHybrisB2BCustomerCompanyRelation"></property>
		<property name="b2bContactRawType" value="RawHybrisCRMB2BContact"></property>
		<property name="dataHubOutboundService" ref="dataHubOutboundService"></property>
	</bean>


	<alias name="sapDefaultUserFacade" alias="userFacade" />
	<bean id="sapDefaultUserFacade"
		class="com.sap.hybris.sapcrmcustomerb2b.outbound.B2BDefaultUserFacade"
		parent="defaultUserFacade">
	</bean>

<alias name="defaultInboundB2BCustomerHelper" alias="inboundB2BCustomerHelper" />
	<bean id="defaultInboundB2BCustomerHelper" class="com.sap.hybris.sapcrmcustomerb2b.inbound.impl.DefaultInboundB2BCustomerHelper">
		<property name="b2bCustomerService" ref="b2bCustomerService" />
	</bean>

</beans>
